{
  "$id": "https://json.schemastore.org/app-config.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Application Configuration Schema",
  "type": "object",
  "description": "This is the schema describing the structure of the app-config.yaml configuration file.",
  "properties": {
    "app": {
      "type": "object",
      "description": "Generic frontend configuration.",
      "properties": {
        "baseUrl": {
          "type": "string",
          "description": "The public absolute root URL that the frontend."
        },
        "title": {
          "type": "string",
          "description": "The title of the app, as shown in the Backstage web interface."
        },
        "datadogRum": {
          "type": "object",
          "description": "Datadog RUM events configuration",
          "properties": {
            "env": {
              "type": "string",
              "description": "Environment for Datadog RUM events"
            },
            "clientToken": {
              "type": "string",
              "description": "clientToken for Datadog RUM events"
            },
            "applicationId": {
              "type": "string",
              "description": "applicationId for Datadog RUM events"
            },
            "site": {
              "type": "string",
              "description": "site for Datadog RUM events"
            }
          }
        },
        "listen": {
          "type": "object",
          "description": "Listening configuration for local development",
          "properties": {
            "host": {
              "type": "string",
              "description": "The host that the frontend should be bound to. Only used for local development."
            },
            "port": {
              "type": "number",
              "description": "The port that the frontend should be bound to. Only used for local development."
            }
          }
        },
        "https": {
          "type": "object",
          "description": "Only used for local development. The https object is passed to webpack in order to enable using https on localhost.",
          "properties": {
            "certificate": {
              "type": "object",
              "description": "Parent object containing certificate and the private key",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Https Certificate private key. Use $file to load in a file"
                },
                "cert": {
                  "type": "string",
                  "description": "Https Certificate. Use $file to load in a file"
                }
              }
            }
          }
        },
        "support": {
          "description": "Information about support of this Backstage instance and how to contact the integrator team.",
          "type": "object",
          "properties": {
            "url": {
              "description": "The primary support url.",
              "type": "string"
            },
            "items": {
              "description": "A list of categorized support item groupings.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "The title of the support item grouping.",
                    "type": "string"
                  },
                  "icon": {
                    "description": "An optional icon for the support item grouping.",
                    "type": "string"
                  },
                  "links": {
                    "description": "A list of support links for the Backstage instance inside this grouping.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "routes": {
          "type": "object",
          "properties": {
            "bindings": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "extensions": {
          "anyOf": [
            {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "at": {
                        "type": "string"
                      },
                      "extension": {
                        "type": "string"
                      },
                      "config": {}
                    }
                  },
                  {
                    "type": [
                      "string",
                      "boolean"
                    ]
                  }
                ]
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "analytics": {
          "type": "object",
          "properties": {
            "ga": {
              "type": "object",
              "properties": {
                "trackingId": {
                  "description": "Google Analytics tracking ID, e.g. UA-000000-0",
                  "type": "string"
                },
                "scriptSrc": {
                  "description": "URL to Google Analytics analytics.js script\nDefaults to fetching from GA source (eg. https://www.google-analytics.com/analytics.js)",
                  "type": "string"
                },
                "identity": {
                  "description": "Controls how the identityApi is used when sending data to GA:\n\n- `disabled`: (Default) Explicitly prevents a user's identity from\n  being used when capturing events in GA.\n- `optional`: Pageviews and hits are forwarded to GA as they happen\n  and only include user identity metadata once known. Guarantees\n  that hits are captured for all sessions, even if no sign in\n  occurs, but may result in dropped hits in User ID views.\n- `required`: All pageviews and hits are deferred until an identity\n  is known. Guarantees that all data sent to GA correlates to a user\n  identity, but prevents GA from receiving events for sessions in\n  which a user does not sign in. An `identityApi` instance must be\n  passed during instantiation when set to this value.",
                  "enum": [
                    "disabled",
                    "optional",
                    "required"
                  ],
                  "type": "string"
                },
                "virtualSearchPageView": {
                  "description": "Controls whether to send virtual pageviews on `search` events.\nCan be used to enable Site Search in GA.",
                  "type": "object",
                  "properties": {
                    "mode": {
                      "description": "- `disabled`: (Default) no virtual pageviews are sent\n- `only`: Sends virtual pageview _instead_ of the `search` event\n- `both`: Sends both the `search` event _and_ the virtual pageview",
                      "enum": [
                        "both",
                        "disabled",
                        "only"
                      ],
                      "type": "string"
                    },
                    "mountPath": {
                      "description": "Specifies on which path the main Search page is mounted.\nDefaults to `/search`.",
                      "type": "string"
                    },
                    "searchQuery": {
                      "description": "Specifies which query param is used for the term query in the virtual pageview URL.\nDefaults to `query`.",
                      "type": "string"
                    },
                    "categoryQuery": {
                      "description": "Specifies which query param is used for the category query in the virtual pageview URL.\nSkipped by default.",
                      "type": "string"
                    }
                  }
                },
                "debug": {
                  "description": "Whether or not to log analytics debug statements to the console.\nDefaults to false.",
                  "type": "boolean"
                },
                "testMode": {
                  "description": "Prevents events from actually being sent when set to true. Defaults\nto false.",
                  "type": "boolean"
                },
                "customDimensionsMetrics": {
                  "description": "Configuration informing how Analytics Context and Event Attributes\nmetadata will be captured in Google Analytics.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "description": "Specifies whether the corresponding metadata should be collected\nas a Google Analytics custom dimension or custom metric.",
                        "enum": [
                          "dimension",
                          "metric"
                        ],
                        "type": "string"
                      },
                      "index": {
                        "description": "The index of the Google Analytics custom dimension or metric that\nthe metadata should be written to.",
                        "type": "number"
                      },
                      "source": {
                        "description": "Specifies whether the desired value lives as an attribute on the\nAnalytics Context or the Event's Attributes.",
                        "enum": [
                          "attributes",
                          "context"
                        ],
                        "type": "string"
                      },
                      "key": {
                        "description": "The property of the context or attributes that should be captured.\ne.g. to capture the Plugin ID associated with an event, the source\nshould be set to \"context\" and the key should be set to pluginId.",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "ga4": {
              "type": "object",
              "properties": {
                "measurementId": {
                  "description": "Google Analytics measurement ID, e.g. G-000000-0",
                  "type": "string"
                },
                "identity": {
                  "description": "Controls how the identityApi is used when sending data to GA:\n\n- `disabled`: (Default) Explicitly prevents a user's identity from\n  being used when capturing events in GA.\n- `optional`: Pageviews and hits are forwarded to GA as they happen\n  and only include user identity metadata once known. Guarantees\n  that hits are captured for all sessions, even if no sign in\n  occurs, but may result in dropped hits in User ID views.\n- `required`: All pageviews and hits are deferred until an identity\n  is known. Guarantees that all data sent to GA correlates to a user\n  identity, but prevents GA from receiving events for sessions in\n  which a user does not sign in. An `identityApi` instance must be\n  passed during instantiation when set to this value.",
                  "enum": [
                    "disabled",
                    "optional",
                    "required"
                  ],
                  "type": "string"
                },
                "debug": {
                  "description": "Whether to log analytics debug statements to the console.\nDefaults to false.",
                  "type": "boolean"
                },
                "testMode": {
                  "description": "Prevents events from actually being sent when set to true. Defaults\nto false.",
                  "type": "boolean"
                },
                "contentGrouping": {
                  "description": "Content grouping definition\nFeature available in Google Analytics 4\nMore information https://support.google.com/analytics/answer/11523339?hl=en\nData can be grouped by pluginId, routeRef\nTakes 24 hours before metrics shows up in GA dashboard\nSpecifies the dimension to be used for content grouping\nCan be one of pluginId, extension or routeRef",
                  "enum": [
                    "extension",
                    "pluginId",
                    "routeRef"
                  ],
                  "type": "string"
                },
                "allowedContexts": {
                  "description": "Configuration informing how Analytics Context and Event Attributes\nmetadata will be captured in Google Analytics.\nContexts that will be sent as parameters in the event.\ncontext-name will be prefixed by c_, for example, pluginId will be c_pluginId in the event.",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "array",
                      "items": [
                        {
                          "type": "string",
                          "const": "*"
                        }
                      ],
                      "minItems": 1,
                      "maxItems": 1
                    }
                  ]
                },
                "allowedAttributes": {
                  "description": "Attributes that will be sent as parameters in the event\nattribute-name will be prefixed by a_, for example , testAttribute will be c_testAttribute in the event.",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    {
                      "type": "array",
                      "items": [
                        {
                          "type": "string",
                          "const": "*"
                        }
                      ],
                      "minItems": 1,
                      "maxItems": 1
                    }
                  ]
                }
              }
            },
            "newRelic": {
              "type": "object",
              "properties": {
                "endpoint": {
                  "description": "Data ingestion endpoint to use, either bam.eu01.nr-data.net (EU) or bam.nr-data.net (US)",
                  "enum": [
                    "bam.eu01.nr-data.net",
                    "bam.nr-data.net"
                  ],
                  "type": "string"
                },
                "accountId": {
                  "description": "New Relic Account ID, e.g. 1234567",
                  "type": "string"
                },
                "applicationId": {
                  "description": "New Relic Application ID, e.g. 987654321",
                  "type": "string"
                },
                "licenseKey": {
                  "description": "New Relic License Key, e.g. NRJS-12a3456bc78de9123f4",
                  "type": "string"
                },
                "distributedTracingEnabled": {
                  "description": "Whether to enabled distributed tracing, defaults to false",
                  "type": "boolean"
                },
                "cookiesEnabled": {
                  "description": "Whether to enabled tracing of cookies, defaults to false",
                  "type": "boolean"
                }
              }
            }
          }
        },
        "packageName": {
          "description": "The name of the app package (in most Backstage repositories, this is the\n\"name\" field in `packages/app/package.json`) that content should be served\nfrom. The same app package should be added as a dependency to the backend\npackage in order for it to be accessible at runtime.\n\nIn a typical setup with a single app package, this will default to 'app'.",
          "type": "string"
        },
        "disableConfigInjection": {
          "description": "Disables the configuration injection. This can be useful if you're running in an environment\nwith a read-only filesystem, or for some other reason don't want configuration to be injected.\n\nNote that this will cause the configuration used when building the app bundle to be used, unless\na separate configuration loading strategy is set up.\n\nThis also disables configuration injection though `APP_CONFIG_` environment variables.",
          "type": "boolean"
        },
        "disableStaticFallbackCache": {
          "description": "By default the app backend plugin will cache previously deployed static assets in the database.\nIf you disable this, it is recommended to set a `staticFallbackHandler` instead.",
          "type": "boolean"
        }
      }
    },
    "allure": {
      "type": "object",
      "properties": {
        "baseUrl": {
          "type": "string",
        }
      }
    },
    "firehydrant": {
      "type": "object",
      "properties": {
        "baseUrl": {
          "type": "string",
        }
      }
    },
    "lighthouse": {
      "type": "object",
      "properties": {
        "baseUrl": {
          "type": "string",
        }
      }
    },
    "nomad": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string",
          "description": "The address of the Nomad API. See: https://developer.hashicorp.com/nomad/api-docs#addressing-and-ports",
        },
        "token": {
          "type": "string",
          "description": "The token to call the Nomad API with. See: https://developer.hashicorp.com/nomad/api-docs#authentication",
        }
      }
    },
    "auth": {
      "type": "object",
      "description": "Configuration that provides information on available configured authentication providers.",
      "properties": {
        "providers": {
          "type": "object",
          "description": "The available auth-provider options and attributes",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": true
          },
          "properties": {
            "google": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  }
                }
              }
            },
            "github": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "enterpriseInstanceUrl": {
                    "type": "string"
                  }
                }
              }
            },
            "saml": {
              "type": "object",
              "properties": {
                "entryPoint": {
                  "type": "string"
                },
                "logoutUrl": {
                  "type": "string"
                },
                "issuer": {
                  "type": "string"
                },
                "cert": {
                  "type": "string"
                },
                "audience": {
                  "type": "string"
                },
                "privateKey": {
                  "type": "string"
                },
                "authnContext": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "identifierFormat": {
                  "type": "string"
                },
                "decryptionPvk": {
                  "type": "string"
                },
                "signatureAlgorithm": {
                  "enum": [
                    "sha256",
                    "sha512"
                  ],
                  "type": "string"
                },
                "digestAlgorithm": {
                  "type": "string"
                },
                "acceptedClockSkewMs": {
                  "type": "number"
                }
              }
            },
            "okta": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "audience": {
                    "type": "string"
                  },
                  "authServerId": {
                    "type": "string"
                  },
                  "idp": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  }
                }
              }
            },
            "oauth2": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "authorizationUrl": {
                    "type": "string"
                  },
                  "tokenUrl": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string"
                  },
                  "disableRefresh": {
                    "type": "boolean"
                  },
                  "includeBasicAuth": {
                    "type": "boolean"
                  }
                }
              }
            },
            "oidc": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "metadataUrl": {
                    "type": "string"
                  },
                  "tokenEndpointAuthMethod": {
                    "type": "string"
                  },
                  "tokenSignedResponseAlg": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string"
                  },
                  "prompt": {
                    "type": "string"
                  }
                }
              }
            },
            "auth0": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  },
                  "audience": {
                    "type": "string"
                  },
                  "connection": {
                    "type": "string"
                  },
                  "connectionScope": {
                    "type": "string"
                  }
                }
              }
            },
            "onelogin": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "issuer": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  }
                }
              }
            },
            "awsalb": {
              "type": "object",
              "properties": {
                "iss": {
                  "type": "string"
                },
                "region": {
                  "type": "string"
                }
              }
            },
            "cfaccess": {
              "type": "object",
              "properties": {
                "teamName": {
                  "type": "string"
                }
              }
            },
            "gcpIap": {
              "description": "Configuration for the Google Cloud Platform Identity-Aware Proxy (IAP) auth provider.",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "audience": {
                    "description": "The audience to use when validating incoming JWT tokens.\nSee https://backstage.io/docs/auth/google/gcp-iap-auth",
                    "type": "string"
                  },
                  "jwtHeader": {
                    "description": "The name of the header to read the JWT token from, defaults to `'x-goog-iap-jwt-assertion'`.",
                    "type": "string"
                  }
                }
              }
            },
            "gitlab": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "audience": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  }
                }
              }
            },
            "microsoft": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "tenantId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "callbackUrl": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "environment": {
          "description": "The 'environment' attribute added as an optional parameter to have configurable environment value for `auth.providers`.\ndefault value: 'development'\noptional values: 'development' | 'production'",
          "type": "string"
        },
        "autologout": {
          "description": "Autologout feature configuration",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enable or disable the autologout feature",
              "type": "boolean"
            },
            "idleTimeoutMinutes": {
              "description": "Number of minutes after which the inactive user is logged out automatically.\nDefault is 60 minutes (1 hour)",
              "type": "number"
            },
            "promptBeforeIdleSeconds": {
              "description": "Number of seconds before the idle timeout where the user will be asked if it's still active.\nA dialog will be shown.\nDefault is 10 seconds.\nSet to 0 seconds to disable the prompt.",
              "type": "number"
            },
            "useWorkerTimers": {
              "description": "Enable/disable the usage of worker thread timers instead of main thread timers.\nDefault is true.\nIf you experience some browser incompatibility, you may try to set this to false.",
              "type": "boolean"
            },
            "logoutIfDisconnected": {
              "description": "Enable/disable the automatic logout also on users that are logged in but with no Backstage tabs open.\nDefault is true.",
              "type": "boolean"
            }
          }
        },
        "session": {
          "type": "object",
          "properties": {
            "secret": {
              "description": "The secret attribute of session object.",
              "type": "string"
            }
          }
        },
        "identityTokenAlgorithm": {
          "description": "JWS \"alg\" (Algorithm) Header Parameter value. Defaults to ES256.\nMust match one of the algorithms defined for IdentityClient.\nWhen setting a different algorithm, check if the `key` field\nof the `signing_keys` table can fit the length of the generated keys.\nIf not, add a knex migration file in the migrations folder.\nMore info on supported algorithms: https://github.com/panva/jose",
          "type": "string"
        },
        "keyStore": {
          "description": "To control how to store JWK data in auth-backend",
          "type": "object",
          "properties": {
            "provider": {
              "enum": [
                "database",
                "firestore",
                "memory"
              ],
              "type": "string"
            },
            "firestore": {
              "type": "object",
              "properties": {
                "host": {
                  "description": "The host to connect to",
                  "type": "string"
                },
                "port": {
                  "description": "The port to connect to",
                  "type": "number"
                },
                "ssl": {
                  "description": "Whether to use SSL when connecting.",
                  "type": "boolean"
                },
                "projectId": {
                  "description": "The Google Cloud Project ID",
                  "type": "string"
                },
                "keyFilename": {
                  "description": "Local file containing the Service Account credentials.\nYou can omit this value to automatically read from\nGOOGLE_APPLICATION_CREDENTIALS env which is useful for local\ndevelopment.",
                  "type": "string"
                },
                "path": {
                  "description": "The path to use for the collection. Defaults to 'sessions'",
                  "type": "string"
                },
                "timeout": {
                  "description": "Timeout used for database operations. Defaults to 10000ms",
                  "type": "number"
                }
              }
            }
          }
        }
      }
    },
    "discovery": {
      "description": "Discovery options.",
      "type": "object",
      "properties": {
        "endpoints": {
          "description": "Endpoints\n\nA list of target baseUrls and the associated plugins.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "target": {
                "description": "The target baseUrl to use for the plugin\n\nCan be either a string or an object with internal and external keys.\nTargets with `{{pluginId}}` or `{{ pluginId }} in the url will be replaced with the pluginId.",
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "external": {
                        "type": "string"
                      },
                      "internal": {
                        "type": "string"
                      }
                    }
                  },
                  {
                    "type": "string"
                  }
                ],
              },
              "plugins": {
                "description": "Array of plugins which use the target baseUrl.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "backend": {
      "type": "object",
      "description": "Generic backend configuration.",
      "properties": {
        "auth": {
          "description": "Backend configuration for when request authentication is enabled",
          "type": "object",
          "properties": {
            "keys": {
              "description": "Keys shared by all backends for signing and validating backend tokens.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "secret": {
                    "description": "Secret for generating tokens. Should be a base64 string, recommended\nlength is 24 bytes.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "baseUrl": {
          "type": "string",
          "description": "The public absolute root URL that the backend is reachable at, from the browser's perspective.",
        },
        "listen": {
          "description": "Address that the backend should listen to.",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "host": {
                  "description": "Address of the interface that the backend should bind to.",
                  "type": "string"
                },
                "port": {
                  "description": "Port that the backend should listen to.",
                  "type": [
                    "string",
                    "number"
                  ]
                }
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "https": {
          "description": "HTTPS configuration for the backend. If omitted the backend will serve HTTP.\n\nSetting this to `true` will cause self-signed certificates to be generated, which\ncan be useful for local development or other non-production scenarios.",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "certificate": {
                  "description": "Certificate configuration",
                  "type": "object",
                  "properties": {
                    "cert": {
                      "description": "PEM encoded certificate. Use $file to load in a file",
                      "type": "string"
                    },
                    "key": {
                      "description": "PEM encoded certificate key. Use $file to load in a file.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            {
              "const": true,
              "type": "boolean"
            }
          ]
        },
        "database": {
          "description": "Database connection configuration, select base database type using the `client` field",
          "type": "object",
          "properties": {
            "client": {
              "description": "Default database client to use",
              "enum": [
                "better-sqlite3",
                "pg",
                "sqlite3"
              ],
              "type": "string"
            },
            "connection": {
              "description": "Base database connection string, or object with individual connection properties",
              "anyOf": [
                {
                  "type": "object",
                  "additionalProperties": {},
                  "properties": {
                    "password": {
                      "description": "Password that belongs to the client User",
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "prefix": {
              "description": "Database name prefix override",
              "type": "string"
            },
            "ensureExists": {
              "description": "Whether to ensure the given database exists by creating it if it does not.\nDefaults to true if unspecified.",
              "type": "boolean"
            },
            "pluginDivisionMode": {
              "description": "How plugins databases are managed/divided in the provided database instance.\n\n`database` -> Plugins are each given their own database to manage their schemas/tables.\n\n`schema` -> Plugins will be given their own schema (in the specified/default database)\n            to manage their tables.\n\nNOTE: Currently only supported by the `pg` client.",
              "default": "database",
              "enum": [
                "database",
                "schema"
              ],
              "type": "string"
            },
            "role": {
              "description": "Configures the ownership of newly created schemas in pg databases.",
              "type": "string"
            },
            "knexConfig": {
              "description": "Arbitrary config object to pass to knex when initializing\n(https://knexjs.org/#Installation-client). Most notable is the debug\nand asyncStackTraces booleans",
              "type": "object",
              "additionalProperties": true
            },
            "plugin": {
              "description": "Plugin specific database configuration and client override",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "client": {
                    "description": "Database client override",
                    "enum": [
                      "better-sqlite3",
                      "pg",
                      "sqlite3"
                    ],
                    "type": "string"
                  },
                  "connection": {
                    "description": "Database connection string or Knex object override",
                    "anyOf": [
                      {
                        "type": "object",
                        "properties": {},
                        "additionalProperties": true
                      },
                      {
                        "type": "string"
                      }
                    ]
                  },
                  "ensureExists": {
                    "description": "Whether to ensure the given database exists by creating it if it does not.\nDefaults to base config if unspecified.",
                    "type": "boolean"
                  },
                  "knexConfig": {
                    "description": "Arbitrary config object to pass to knex when initializing\n(https://knexjs.org/#Installation-client). Most notable is the\ndebug and asyncStackTraces booleans.\n\nThis is merged recursively into the base knexConfig",
                    "type": "object",
                    "additionalProperties": true
                  },
                  "role": {
                    "description": "Configures the ownership of newly created schemas in pg databases.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "cache": {
          "description": "Cache connection configuration, select cache type using the `store` field",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "store": {
                  "type": "string",
                  "const": "memory"
                }
              },
            },
            {
              "type": "object",
              "properties": {
                "store": {
                  "type": "string",
                  "const": "redis"
                },
                "connection": {
                  "description": "A redis connection string in the form `redis://user:pass@host:port`.",
                  "type": "string"
                }
              },
            },
            {
              "type": "object",
              "properties": {
                "store": {
                  "type": "string",
                  "const": "memcache"
                },
                "connection": {
                  "description": "A memcache connection string in the form `user:pass@host:port`.",
                  "type": "string"
                }
              },
            }
          ]
        },
        "cors": {
          "type": "object",
          "properties": {
            "origin": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "methods": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "allowedHeaders": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "exposedHeaders": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "credentials": {
              "type": "boolean"
            },
            "maxAge": {
              "type": "number"
            },
            "preflightContinue": {
              "type": "boolean"
            },
            "optionsSuccessStatus": {
              "type": "number"
            }
          }
        },
        "reading": {
          "description": "Configuration related to URL reading, used for example for reading catalog info\nfiles, scaffolder templates, and techdocs content.",
          "type": "object",
          "properties": {
            "allow": {
              "description": "A list of targets to allow outgoing requests to. Users will be able to make\nrequests on behalf of the backend to the targets that are allowed by this list.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "host": {
                    "description": "A host to allow outgoing requests to, being either a full host or\na subdomain wildcard pattern with a leading `*`. For example `example.com`\nand `*.example.com` are valid values, `prod.*.example.com` is not.\nThe host may also contain a port, for example `example.com:8080`.",
                    "type": "string"
                  },
                  "paths": {
                    "description": "An optional list of paths. In case they are present only targets matching\nany of them will are allowed. You can use trailing slashes to make sure only\nsubdirectories are allowed, for example `/mydir/` will allow targets with\npaths like `/mydir/a` but will block paths like `/mydir2`.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "csp": {
          "description": "Content Security Policy options.\n\nThe keys are the plain policy ID, e.g. \"upgrade-insecure-requests\". The\nvalues are on the format that the helmet library expects them, as an\narray of strings. There is also the special value false, which means to\nremove the default value that Backstage puts in place for that policy.",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "const": false,
                "type": "boolean"
              }
            ]
          }
        }
      }
    },
    "organization": {
      "description": "Configuration that provides information about the organization that the app is for.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The name of the organization that the app belongs to.",
          "type": "string"
        }
      }
    },
    "homepage": {
      "description": "This config was used by the HomepageTimer but has been replaced  by the HeaderWorldClock in the home plugin",
      "deprecated": "in favor of the HeaderWorldClock which is found in the home plugin",
      "type": "object",
      "properties": {
        "clocks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "label": {
                "type": "string"
              },
              "timezone": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "enableExperimentalRedirectFlow": {
      "description": "Enable redirect authentication flow type, instead of a popup for authentication.",
      "type": "boolean"
    },
    "aws": {
      "description": "Configuration for access to AWS accounts",
      "type": "object",
      "properties": {
        "accountDefaults": {
          "description": "Defaults for retrieving AWS account credentials",
          "type": "object",
          "properties": {
            "roleName": {
              "description": "The IAM role to assume to retrieve temporary AWS credentials",
              "type": "string"
            },
            "partition": {
              "description": "The AWS partition of the IAM role, e.g. \"aws\", \"aws-cn\"",
              "type": "string"
            },
            "region": {
              "description": "The STS regional endpoint to use when retrieving temporary AWS credentials, e.g. \"ap-northeast-1\"",
              "type": "string"
            },
            "externalId": {
              "description": "The unique identifier needed to assume the role to retrieve temporary AWS credentials",
              "type": "string"
            }
          }
        },
        "mainAccount": {
          "description": "Main account to use for retrieving AWS account credentials",
          "type": "object",
          "properties": {
            "accessKeyId": {
              "description": "The access key ID for a set of static AWS credentials",
              "type": "string"
            },
            "secretAccessKey": {
              "description": "The secret access key for a set of static AWS credentials",
              "type": "string"
            },
            "profile": {
              "description": "The configuration profile from a credentials file at ~/.aws/credentials and\na configuration file at ~/.aws/config.",
              "type": "string"
            },
            "region": {
              "description": "The STS regional endpoint to use for the main account, e.g. \"ap-northeast-1\"",
              "type": "string"
            }
          }
        },
        "accounts": {
          "description": "Configuration for retrieving AWS accounts credentials",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "accountId": {
                "description": "The account ID of the target account that this matches on, e.g. \"123456789012\"",
                "type": "string"
              },
              "accessKeyId": {
                "description": "The access key ID for a set of static AWS credentials",
                "type": "string"
              },
              "secretAccessKey": {
                "description": "The secret access key for a set of static AWS credentials",
                "type": "string"
              },
              "profile": {
                "description": "The configuration profile from a credentials file at ~/.aws/credentials and\na configuration file at ~/.aws/config.",
                "type": "string"
              },
              "roleName": {
                "description": "The IAM role to assume to retrieve temporary AWS credentials",
                "type": "string"
              },
              "partition": {
                "description": "The AWS partition of the IAM role, e.g. \"aws\", \"aws-cn\"",
                "type": "string"
              },
              "region": {
                "description": "The STS regional endpoint to use when retrieving temporary AWS credentials, e.g. \"ap-northeast-1\"",
                "type": "string"
              },
              "externalId": {
                "description": "The unique identifier needed to assume the role to retrieve temporary AWS credentials",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "integrations": {
      "description": "Configuration for integrations towards various external repository provider systems",
      "type": "object",
      "properties": {
        "azure": {
          "description": "Integration configuration for Azure",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "host": {
                "description": "The hostname of the given Azure instance",
                "type": "string"
              },
              "token": {
                "description": "Token used to authenticate requests.",
                "deprecated": "Use `credentials` instead.",
                "type": "string"
              },
              "credential": {
                "description": "The credential to use for requests.\n\nIf no credential is specified anonymous access is used.",
                "deprecated": "Use `credentials` instead.",
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string"
                  },
                  "clientSecret": {
                    "type": "string"
                  },
                  "tenantId": {
                    "type": "string"
                  },
                  "personalAccessToken": {
                    "type": "string"
                  }
                }
              },
              "credentials": {
                "description": "The credentials to use for requests. If multiple credentials are specified the first one that matches the organization is used.\nIf not organization matches the first credential without an organization is used.\n\nIf no credentials are specified at all, either a default credential (for Azure DevOps) or anonymous access (for Azure DevOps Server) is used.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "clientId": {
                      "type": "string"
                    },
                    "clientSecret": {
                      "type": "string"
                    },
                    "tenantId": {
                      "type": "string"
                    },
                    "personalAccessToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "bitbucket": {
          "description": "Integration configuration for Bitbucket",
          "deprecated": "replaced by bitbucketCloud and bitbucketServer",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "host": {
                "description": "The hostname of the given Bitbucket instance",
                "type": "string"
              },
              "token": {
                "description": "Token used to authenticate requests.",
                "type": "string"
              },
              "apiBaseUrl": {
                "description": "The base url for the Bitbucket API, for example https://api.bitbucket.org/2.0",
                "type": "string"
              },
              "username": {
                "description": "The username to use for authenticated requests.",
                "type": "string"
              },
              "appPassword": {
                "description": "Bitbucket app password used to authenticate requests.",
                "type": "string"
              }
            }
          }
        },
        "bitbucketCloud": {
          "description": "Integration configuration for Bitbucket Cloud",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "username": {
                "description": "The username to use for authenticated requests.",
                "type": "string"
              },
              "appPassword": {
                "description": "Bitbucket Cloud app password used to authenticate requests.",
                "type": "string"
              }
            }
          }
        },
        "bitbucketServer": {
          "description": "Integration configuration for Bitbucket Server",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "host": {
                "description": "The hostname of the given Bitbucket Server instance",
                "type": "string"
              },
              "token": {
                "description": "Token used to authenticate requests.",
                "type": "string"
              },
              "username": {
                "description": "Username used to authenticate requests with Basic Auth.",
                "type": "string"
              },
              "password": {
                "description": "Password (or token as password) used to authenticate requests with Basic Auth.",
                "type": "string"
              },
              "apiBaseUrl": {
                "description": "The base url for the Bitbucke
